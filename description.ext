OnLoadName="[IFA3] WW2 Rush";
onLoadMission = "Battlefield brought to ArmA3";
author = "A. Roman";
onLoadMissionTime = 0;

version = "0.71.0";

// Debug
enableDebugConsole[] = {"76561198039414328"};

// Functions
class CfgFunctions {
    #include "bin\functions.h"
};

// RemoteExec Filters
class CfgRemoteExec {
    class Functions {
        mode = 1;
        jip = 1;
        #include "bin\restrictions.h"
    };

    class Commands
    {
        mode = 1;
        class setFuel {allowedTargets = 0;};
    };
};

// Configs
#include "config\master.h"
#include "config\factions.h"
#include "config\perks.h"
#include "config\map_settings.h"
#include "config\hints.h"

onPauseScript[] = {client_fnc_saveStatistics};

// Disable briefing
briefing = 0;

// Disable debriefing
debriefing = 0;

/* showHUD[] = {
    1,   // Scripted HUD (same as showHUD command)
    0,  // Vehicle + soldier info
    0,  // Vehicle radar [HIDDEN]
    0,  // Vehicle compass [HIDDEN]
    0,  // Tank direction indicator
    1,   // Commanding menu
    0,  // Group Bar
    1    // HUD Weapon Cursors
}; */

// Wreck remover
wreckManagerMode = 1;
wreckLimit = 1;
wreckRemovalMinTime = 5;
wreckRemovalMaxTime = 5;

// Header
class Header
{
	gameType = DM; // Game type, see 'class' columns in the table below
	minPlayers = 8; //min # of players the mission supports
	maxPlayers = 60; //max # of players the mission supports
};

// Channels
disableChannels[]={};

// Sounds
#include "config\sounds.h"

// Other hpps
#include "dialogs\common.h"

// Dialogs
#include "dialogs\dialogs.h"

// Additional RscTitles
class RscTitles {
  #include "dialogs\titles.h"
};

// Skip the role selection screen
joinUnassigned = 1;

// Disable Ai
disabledAI = 1;

// Respawn
respawnDelay = 15;
respawn = "BASE";
respawnDialog = 0;

// Make corpses despawn
corpseLimit = 1;
corpseRemovalMinTime = 1;
corpseRemovalMaxTime = 1;
corpseManagerMode = 1;

// Debriefing
class CfgDebriefing
{
    class MatchEnd
    {
        title = "MATCH ENDED";
        subtitle = "";
        description = "";
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.96,0.65,0.12,0.8};
    };

    class MatchLeft
    {
        title = "MATCH LEFT";
        subtitle = "YOU HAVE LEFT AN ONGOING BATTLE";
        description = "Your progress has been saved";
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.96,0.65,0.12,0.8};
    };

    class JoinWEST
    {
        title = "AUTO TEAM BALANCE";
        subtitle = "YOU HAVE BEEN AUTO TEAM BALANCED";
        description = "Please return to the lobby and join the Blue team! (Your progress has been saved)";
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.96,0.65,0.12,0.8};
    };

    class Joinindependent
    {
        title = "AUTO TEAM BALANCE";
        subtitle = "YOU HAVE BEEN AUTO TEAM BALANCED";
        description = "Please return to the lobby and join the Green team! (Your progress has been saved)";
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.96,0.65,0.12,0.8};
    };

    class teamFullindependent
    {
        title = "AUTO TEAM BALANCE";
        subtitle = "THIS TEAM HAS TOO MANY PLAYERS";
        description = "Please return to the lobby and join the Green team.";
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.96,0.65,0.12,0.8};
    };

    class teamFullWEST
    {
        title = "AUTO TEAM BALANCE";
        subtitle = "THIS TEAM HAS TOO MANY PLAYERS";
        description = "Please return to the lobby and join Blue team.";
        pictureBackground = "";
        picture = "";
        pictureColor[] = {0.96,0.65,0.12,0.8};
    };
};

class Params {
  class header {
    title = "========== MATCH SETTINGS =======================================";
    values[] = {0};
    default = 0;
    texts[] = {""};
  };
  class DebugMode {
    title = "Debugging:";
    values[] = {0, 1};
    default = 0;
    texts[] = {"OFF", "ON"};
  };
  class MinPlayers {
    title = "Minimum players for the match to start:";
    values[] = {0, 2, 4, 8, 16, 32};
    default = 4;
    texts[] = {"No players", "2 players", "4 players", "8 players", "16 players", "32 players"};
  };
  class header_11: header {
    title = "========== TICKETS SETTINGS =======================================";
    values[] = {0};
    default = 0;
    texts[] = {""};
  };
  class MaxTickets {
    title = "Maximum tickets per objective:";
    values[] = {100, 200, 300, 400, 500};
    default = 300;
    texts[] = {"100 Tickets", "200 Tickets", "300 Tickets", "400 Tickets", "500 Tickets"};
  };
  class MinTickets {
    title = "Minimum tickets per objective:";
    values[] = {25, 50, 75, 100};
    texts[] = {"25 Tickets", "50 Tickets", "75 Tickets", "100 Tickets"};
    default = 25;
  };
  class TicketsRate {
    title = "How many tickets should each attacker on average have:";
    values[] = {5, 7.5, 10, 12.5, 15, 20, 30};
    texts[] = {"5 Tickets/Attacker", "7.5 Tickets/Attacker", "10 Tickets/Attacker", "12.5 Tickets/Attacker", "15 Tickets/Attacker", "20 Tickets/Attacker", "30 Tickets/Attacker"};
    default = 10;
  };
  class header_2: header {
    title = "========== TIME SETTINGS ==========================================";
  };
  class LobbyTime {
    title = "Interval between rounds:";
    values[] = {10, 20, 30, 60, 120, 180, 240, 300};
    texts[] = {"10 Seconds", "20 Seconds", "30 Seconds", "60 Seconds", "120 Seconds", "180 Seconds", "240 Seconds", "300 Seconds"};
    default = 30;
  };
  class RoundTime {
    title = "How many minutes per objective:";
    values[] = {5,7.5,10,12.5,15,17.5,20};
    texts[] = {"5 Minutes", "7 Minutes 30 Seconds", "10 Minutes", "12 Minutes 30 Seconds", "15 Minutes", "17 Minutes 30 Seconds", "20 Minutes"};
    default = 15;
  };
  class MaxMatchDuration {
    title = "Maximum match duration:";
    values[] = {-1, 3600, 7200, 10800, 14400, 18000};
    texts[] = {"Infinite", "1 Hour", "2 Hours", "3 Hours", "4 Hours", "5 Hours"};
    default = 10800;
  };
  class SpawnSafeTime {
    title = "How many seconds should the spawn protection last:";
    values[] = {0, 3, 5, 10, 15};
    texts[] = {"0 Seconds", "3 Seconds", "5 Seconds", "10 Seconds", "15 Seconds"};
    default = 5;
  };
  class header_3: header {
    title = "========== FACTIONS SETTINGS ======================================";
  };
  #include "config\params.h"
  class header_5: header {
    title = "========== BOUNDARIES SETTINGS ====================================";
  };
  class OutOfBoundsTime {
    title = "Time a player is allowed to trespass bounds:";
    values[] = {5, 10, 15, 20, 25, 30};
    texts[] = {"5 Seconds", "10 Seconds", "15 Seconds", "20 Seconds", "25 Seconds", "30 Seconds"};
    default = 20;
  };
  class InitialFallBack {
    title = "How many seconds for the defenders to be ready:";
    values[] = {15, 30, 60, 90, 120};
    texts[] = {"15 Seconds", "30 Seconds", "60 Seconds", "90 Seconds", "120 Seconds"};
    default = 30;
  };
  class header_6: header {
    title = "========== MAP SETTINGS ===========================================";
  };
  class RotationsPerMatch {
    title = "How many rounds should be played before changing map:";
    values[] = {9999, 1,2,3,4,5,6};
    texts[] = {"Never change map", "1", "2", "3", "4", "5"};
    default = 2;
  };
  class MapWeather {
    title = "Load weather of the specific map or random:";
    values[] = {0, 1};
    texts[] = {"RANDOM", "MAP"};
    default = 0;
  };
  class MapPopulation {
    title = "Threshold of players below which the smaller map will be used:";
    values[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 9999};
    texts[] = {"ALWAYS LARGE", "1 Players", "2 Players", "3 Players", "4 Players", "5 Players", "6 Players", "7 Players", "8 Players", "9 Players", "10 Players", "11 Players", "12 Players", "13 Players", "14 Players", "15 Players", "16 Players", "ALWAYS SMALL"};
    default = 12;
  };
  class header_7: header {
    title = "========== AUTOBALANCER SETTINGS ==================================";
  };
  class AutoTeamBalancer {
    title = "Automatic Team-Balancer:";
    values[] = {0, 1};
    texts[] = {"OFF", "ON"};
    default = 1;
  };
  class AutoTeamBalanceAtDifference {
    title = "Difference between teams for auto team-balancer:";
    values[] = {1, 2, 3, 4, 5};
    default = 3;
  };
  class header_8: header {
    title = "========== CAMERA RESTRICTIONS ====================================";
  };
  class InfantryFPOnly {
    title = "Enforcement of 1st Person only for infantry:";
    values[] = {0, 1};
    texts[] = {"OFF", "ON"};
    default = 1;
  };
  class VehicleFPOnly {
    title = "Enforcement of 1st Person only for vehicles:";
    values[] = {0, 1};
    texts[] = {"OFF", "ON"};
    default = 0;
  };
  class HardcoreMode {
    title = "Enable hardcore mode (no icons or aids):";
    values[] = {0, 1};
    texts[] = {"OFF", "ON"};
    default = 0;
  };
  class header_9: header {
    title = "========== CLASS RESTRICTIONS =====================================";
  };
  class ClassLimits {
    title = "Enable class restrictions: ";
    values[] = {0, 1};
    texts[] = {"OFF", "ON"};
    default = 1;
  };
  class ClassLimits_support {
    title = "Max percentage of players on a side with SUPPORT class: ";
    values[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    texts[] = {"0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"};
    default = 2;
  };
  class ClassLimits_engineer {
    title = "Max percentage of players on a side with ENGINEER class: ";
    values[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    texts[] = {"0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"};
    default = 2;
  };
  class ClassLimits_recon {
    title = "Max players on a side with RECON class: ";
    values[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    texts[] = {"0%", "10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"};
    default = 1;
  };
  class header_10: header {
    title = "========== KILLCAM RESTRICTIONS =====================================";
  };
  class FoeStatsEnabled {
    title = "Enable killer stats: ";
    values[] = {0,1};
    texts[] = {"OFF", "ON"};
    default = 1;
  };
  class KillcamEnabled {
    title = "Enable killcam: ";
    values[] = {0,1};
    texts[] = {"OFF", "ON"};
    default = 1;
  };
};
